---
title: "Lab 6: Simulations"
author: Connor Wiegand
format:
  html:
    theme: 
      - flatly
      - ../lab-style.scss
    toc: true
    toc-depth: 3
    execute: 
      # eval: false
      warning: false
      error: false
    embed-resources: true
    # html-math-method: mathjax
knitr: 
   opts_chunk: 
      class-output: code-out
      class-error: err-out
      class-message: msg-out
# editor:
#    render-on-save: true
---

# Introduction to Simulations in R


## Simulation in econometrics
Simulations are a powerful tool in econometrics, allowing us to model and analyze complex systems by generating and studying synthetic data. They help in understanding the behavior of estimators and test statistics under various scenarios, which is crucial in hypothesis testing and other inferential procedures.

By using R's rich set of packages and functions for statistical computation, an economist can run multiple iterations of a model quickly and efficiently, each time tweaking the parameters slightly to see how sensitive the results are to changes in the underlying assumptions or external shocks.

## `for` loops

`for` loops are a fundamental construct in programming, allowing you to execute a block of code repeatedly, with the ability to modify the behavior of each iteration. This is particularly useful in data analysis and simulations, where you often need to perform repetitive tasks on different subsets of data or run simulations multiple times with varying parameters.

## Basic Structure

The basic syntax of a `for` loop in R is as follows:

```r
for (variable in sequence) {
    # Code to execute on each iteration
}
```

- **`variable`**: This is a placeholder that takes on the value of each element in the sequence, one at a time.
- **`sequence`**: This is a vector or a list over which the loop iterates. It can be a numeric range, characters, or any iterable object in R.

### Example Usage

Hereâ€™s a simple example:

```r
# Loop over a vector of numbers
for (i in 1:5) {
    print(paste("Iteration number", i))
}
```

This loop will print the iteration number five times, each time with the current value of `i`.



## RNG through distribution functions

[Distribution functions]{.hi} are fundamental to statistical analysis and simulations in R, offering a suite of tools to work with different probability distributions. R provides a comprehensive set of functions for working with distributions, including functions for density (`d`), distribution (`p`), quantile (`q`), and random generation (`r`). These functions are prefixed with a letter that denotes their purpose followed by the abbreviation of the distribution name. For example, `rnorm` is for random generation from the normal distribution.

Here are some function notes of a few of the available RNG distribution function in base R

#### Function notes: `rnorm`

::: {.panel-tabset}

##### [Description]{.hi}

The `rnorm` function in R generates random numbers following a normal (Gaussian) distribution. It's widely used in statistics and data science for simulations, statistical modeling, and to represent random errors or natural variations in data. This function is a cornerstone for many statistical methods and experiments that assume a normal distribution.

- [Function]{.hi}: `rnorm()`
- [Package]{.hi}: Base R (no package required)

##### [Syntax]{.hi}
```R
rnorm(n, mean = 0, sd = 1)
```

- `n`: The number of observations to generate.
- `mean`: The mean of the normal distribution. Default is 0.
- `sd`: The standard deviation of the normal distribution. Default is 1.

##### [Ex.]{.ex}
```{r}
# Generating 10 random numbers from a normal distribution
# with mean 0 and standard deviation 1
random_numbers = rnorm(10, mean = 0, sd = 1)

# Display the generated numbers
random_numbers
```

:::


#### Function notes: `runif`

::: {.panel-tabset}

##### [Description]{.hi}

The `runif` function in R generates random numbers following a uniform distribution. It's commonly used in simulations where you need random numbers that are equally likely within a specified range. This function is essential in scenarios requiring random sampling from a uniform distribution, such as Monte Carlo simulations or random allocation in experimental designs.

- [Function]{.hi}: `runif()`
- [Package]{.hi}: Base R (no package required)

##### [Syntax]{.hi}
```R
runif(n, min = 0, max = 1)
```

- `n`: The number of observations to generate.
- `min`: The minimum value of the uniform distribution. Default is 0.
- `max`: The maximum value of the uniform distribution. Default is 1.

##### [Ex.]{.ex}
```{r}
# Generating 10 random numbers from a uniform distribution
# in the range [0, 1]
uniform_numbers = runif(10, min = 0, max = 1)

# Display the generated numbers
uniform_numbers
```

:::

#### Function notes: `rbinom`

::: {.panel-tabset}

##### [Description]{.hi}

The `rbinom` function in R generates random numbers from a binomial distribution, which describes the number of successes in a fixed number of independent Bernoulli trials. It's widely used in statistical modeling and simulations, particularly for scenarios like coin flipping, clinical trials, or any process that can be described in terms of success/failure outcomes.

- [Function]{.hi}: `rbinom()`
- [Package]{.hi}: Base R (no package required)

##### [Syntax]{.hi}
```R
rbinom(n, size, prob)
```

- `n`: The number of random values to generate.
- `size`: The number of trials (or the size of each trial).
- `prob`: The probability of success on each trial.

##### [Ex.]{.ex}
```{r}
# Generating 10 random numbers from a binomial distribution
# with 5 trials and a success probability of 0.5 (like flipping a fair coin)
binomial_numbers = rbinom(10, size = 5, prob = 0.5)

# Display the generated numbers
binomial_numbers
```

:::

#### Function notes: `rpois`

::: {.panel-tabset}

##### [Description]{.hi}

The `rpois` function in R generates random numbers from a Poisson distribution, which is often used to model the number of times an event occurs within a fixed interval of time or space. This function is particularly useful in fields like queuing theory, telecommunications, and epidemiology, where the focus is on counting occurrences of events.

- [Function]{.hi}: `rpois()`
- [Package]{.hi}: Base R (no package required)

##### [Syntax]{.hi}
```R
rpois(n, lambda)
```

- `n`: The number of random values to generate.
- `lambda`: The average number of events in the interval (the rate parameter).

##### [Ex.]{.ex}
```{r}
# Generating 10 random numbers from a Poisson distribution
# with a lambda (rate) of 3
poisson_numbers = rpois(10, lambda = 3)

# Display the generated numbers
poisson_numbers
```

:::

Apart from these, R also supports other distribution functions like `rcauchy` for the Cauchy distribution, `rt` for the t-distribution, `rf` for the F-distribution, among others. Each of these functions allows economists and statisticians to generate random data that can be used to model various stochastic processes or to perform empirical estimation procedures such as the bootstrap method.

Using these random generation functions, one can simulate a wide array of economic and econometric scenarios. For instance, `rnorm` can be used to simulate the error terms in a linear regression model, or `rbinom` can simulate the number of successes in a series of Bernoulli trials, which could represent anything from product sales to policy interventions.

These distribution functions are not only tools for executing statistical methods but also serve as a bridge between theoretical distributions and practical applications, allowing users to visualize and understand statistical concepts in a concrete way. By integrating these functions into econometric models, users gain a deeper appreciation for the underlying statistical mechanics of the methods they employ.
